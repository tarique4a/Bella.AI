from flask import Flask, request, url_for, render_template, redirect
from twilio.twiml.voice_response import Gather, VoiceResponse
from twilio.rest import Client
import openai
import urllib.request
import random
import os
from langdetect import detect
import requests
from requests.auth import HTTPBasicAuth
import time

app = Flask(__name__)

class SaarthiApp:
    def __init__(self):
        self.account_sid = os.getenv('ACCOUNT_SID')  # SID generated by Twilio
        self.auth_token = os.getenv('AUTH_TOKEN')  # Auth token generated by Twilio
        self.openai_api_key = os.getenv('OPENAI_API')  # OpenAI API key
        self.client = Client(self.account_sid, self.auth_token)
        self.messages = []

    def make_call(self, number):
        """
        Initiates a phone call using the Twilio Client API.

        Args:
            number (str): The phone number to call.

        Returns:
            None
        """
        try:
            call = self.client.calls.create(
                url="https://89f67942-e126-41f1-a318-9833a7b95967-00-2d6qpdx8hhio8.riker.replit.dev/record",
                to="+91" + str(number),
                from_="+14192162100"  # Replace with your Twilio US number
            )
            print(f"Call initiated with SID: {call.sid}")
        except Exception as e:
            print(f"Error making call: {str(e)}")
            raise

    def transcribe(self, recording_url):
        """
        Transcribes the audio recording using OpenAI Whisper API.

        Args:
            recording_url (str): The URL of the audio recording.

        Returns:
            dict: The transcription result in dictionary format.
                  Returns None if transcription fails.
        """
        hash = str(random.getrandbits(32))
        delay = 1  # Initial delay for retries
        max_retries = 5  # Maximum retries
        response = None

        try:
            for attempt in range(max_retries):
                try:
                    response = requests.get(recording_url, auth=HTTPBasicAuth(self.account_sid, self.auth_token))
                    if response.status_code == 200:
                        with open(hash + ".wav", 'wb') as f:
                            f.write(response.content)
                        break
                except requests.exceptions.RequestException as e:
                    print(f"Error during download: {e}. Retrying in {delay} seconds...")
                    time.sleep(delay)
                    delay *= 2  # Exponential backoff

            if not response or response.status_code != 200:
                print(f"Failed to download recording after {max_retries} attempts.")
                return None

            openai.api_key = self.openai_api_key
            with open(hash + ".wav", "rb") as audio_file:
                transcript = openai.Audio.transcribe("whisper-1", audio_file)
            os.remove(hash + ".wav")
            return transcript

        except Exception as e:
            if os.path.exists(hash + ".wav"):
                os.remove(hash + ".wav")  # Clean up in case of errors
            print(f"Error during transcription: {str(e)}")
            return None

saarthi_app = SaarthiApp()

@app.route('/')
def index():
    """
    Default route that returns a greeting message.
    """
    return render_template('index.html')

@app.route("/call", methods=['GET', 'POST'])
def call():
    """
    Endpoint to initiate a phone call.
    """
    if request.method == 'POST':
        try:
            number = request.form.get("number")
            saarthi_app.make_call(number)
            return redirect(url_for('call', message='Call initiated successfully!'))
        except Exception as e:
            print(f"Error during call: {e}")  # Log the error for debugging
            return redirect(url_for('call', message='Sorry! We are unable to initialize the call. Try verifying the number on Twilio.'))

    message = request.args.get('message')
    return render_template('call.html', message=message)

@app.route("/record", methods=['GET', 'POST'])
def record():
    """
    Endpoint for recording a voice message.
    """
    response = VoiceResponse()
    response.say('Please leave a message after the beep.')
    response.record(action='/handle-recording', finish_on_key='*')
    return str(response)

@app.route("/handle-recording", methods=['POST'])
def handle_recording():
    """
    Endpoint to handle the recorded voice message.
    """
    recording_url = request.form["RecordingUrl"]
    transcription = saarthi_app.transcribe(recording_url)
    if not transcription:
        response = VoiceResponse()
        response.redirect(url_for("record"), method='POST')
        return str(response)

    transcription_text = transcription["text"] + " Create a very short answer that uses a minimum of 25 completion_tokens and a maximum of 100 completion_tokens"
    saarthi_app.messages.append({"role": "user", "content": transcription_text})

    result = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=saarthi_app.messages)
    result_text = result['choices'][0]['message']['content']

    saarthi_app.messages.append({"role": "assistant", "content": result_text})

    response = VoiceResponse()
    gather = Gather(action='/record', method='GET')
    if detect(result_text) == 'hi':
        gather.say(result_text, language='hi-IN')
    else:
        gather.say(result_text)
    response.append(gather)
    response.redirect(url_for("record"), method='POST')
    return str(response)

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=8080)
